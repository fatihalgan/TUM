CREATE OR REPLACE PACKAGE BODY TUMT_MAIN AS
--*****************************************************************************************
--*  return 5 +1 parameters back:Balance, TimeStamp,TransactionId,Resultcode, Pending count
--*  and a recordset for pending payments
--* Resultcode 0 for success 10,12,40 for failure...
--*****************************************************************************************
PROCEDURE sp_BalanceCheck(P_USERNAME IN VARCHAR2,
P_EDGE_DEALER_ID IN VARCHAR2,
P_EDGE_TRANSACTION_ID IN VARCHAR2,P_EDGE_TIMESTAMP IN DATE,
P_TUM_BALANCE OUT NUMBER,P_TUM_TIMESTAMP OUT  DATE,
P_TUM_TRANSACTION_ID OUT  NUMBER,P_TUM_DB_RESULT OUT  NUMBER,
P_PENDING_COUNT OUT NUMBER,
P_PENDING_REQUESTS OUT C_PENDING_PAYMENTS_CURSOR)
IS
V_ACCPAC_DEALER_ID 	   		 TUM_DEALERS_TBL.ACCPAC_DEALER_ID%TYPE;
V_TUM_DEALER_ID    			 TUM_DEALERS_TBL.TUM_DEALER_ID%TYPE;
V_PENDING_AMOUNT   			 TUM_ACCPAC_PAYMENTS_TBL.AMOUNT%TYPE;
V_ACCOUNT_ID 	 			 TUM_DEALER_ACCOUNT_TBL.ACCOUNT_ID%TYPE;
V_ERROR_DETAIL				 VARCHAR2(255);
DEALER_NOT_EXIST			 EXCEPTION;
ACCOUNT_NOT_EXIST 			 EXCEPTION;
V_DEALER_EXIST				 NUMBER(1):=0;
V_ACCOUNT_EXIST				 NUMBER(1):=0;
BEGIN

SELECT SYSDATE
INTO P_TUM_TIMESTAMP
FROM DUAL;

SELECT SEQ_BALANCE_CHECK.NEXTVAL
INTO P_TUM_TRANSACTION_ID
FROM DUAL;

 SELECT COUNT(*) INTO V_DEALER_EXIST
 FROM TUMT.TUM_DEALERS_TBL
 WHERE EDGE_DEALER_ID = P_EDGE_DEALER_ID
 AND DELETED = 0
 AND STATUS = 'Active';

  IF V_DEALER_EXIST != 1 THEN
  RAISE DEALER_NOT_EXIST;
  ELSE
  SELECT ACCPAC_DEALER_ID,TUM_DEALER_ID
  INTO V_ACCPAC_DEALER_ID,V_TUM_DEALER_ID
  FROM TUMT.TUM_DEALERS_TBL
  WHERE EDGE_DEALER_ID = P_EDGE_DEALER_ID
  AND DELETED = 0
  AND STATUS = 'Active';
  END IF;

 -----------------------------------------
 SELECT COUNT(*) INTO V_ACCOUNT_EXIST
 FROM TUMT.TUM_DEALER_ACCOUNT_TBL
 WHERE TUM_DEALER_ID=V_TUM_DEALER_ID;
  IF V_ACCOUNT_EXIST != 1 THEN
  RAISE ACCOUNT_NOT_EXIST;
  ELSE
  SELECT  BALANCE_AMOUNT,ACCOUNT_ID
  INTO    P_TUM_BALANCE,V_ACCOUNT_ID
  FROM    TUM_DEALER_ACCOUNT_TBL
  WHERE   TUM_DEALER_ID=V_TUM_DEALER_ID;
 END IF;

P_PENDING_COUNT:=0;
SELECT  COUNT(AMOUNT)
INTO  P_PENDING_COUNT
FROM TUM_ACCPAC_PAYMENTS_TBL
WHERE ACCPAC_DEALER_ID=V_ACCPAC_DEALER_ID
AND STATUS='Pending';

OPEN P_PENDING_REQUESTS FOR
SELECT ID,ACCPAC_REF_NO,ACCPAC_ORDER_ID,ACCPAC_TIMESTAMP,AMOUNT
FROM   TUM_ACCPAC_PAYMENTS_TBL
WHERE  STATUS='Pending'
AND    ACCPAC_DEALER_ID = V_ACCPAC_DEALER_ID;

P_TUM_DB_RESULT:=0;
INSERT INTO  TUM_BALANCE_CHECK_LOG_TBL
	   		 (ID,TUM_TIMESTAMP,ACCOUNT_ID,
			 USERNAME,EDGE_DEALER_ID,
             EDGE_TRANSACTION_ID ,EDGE_TIMESTAMP,BALANCE_AMOUNT,
			 DB_RESULTCODE,ERROR_DETAIL)
			 VALUES
			 (P_TUM_TRANSACTION_ID,P_TUM_TIMESTAMP,V_ACCOUNT_ID,
			 P_USERNAME,P_EDGE_DEALER_ID,
			 P_EDGE_TRANSACTION_ID,P_EDGE_TIMESTAMP,P_TUM_BALANCE,
			 P_TUM_DB_RESULT,NULL);
COMMIT;

EXCEPTION
WHEN DEALER_NOT_EXIST THEN
P_TUM_DB_RESULT:=10;
--We dont have ACCOUNT_ID and BALANCE values so inserting 0 instead...
INSERT INTO  TUM_BALANCE_CHECK_LOG_TBL
	   		 (ID,TUM_TIMESTAMP,ACCOUNT_ID,
			 USERNAME,EDGE_DEALER_ID,
             EDGE_TRANSACTION_ID ,EDGE_TIMESTAMP,BALANCE_AMOUNT,
			 DB_RESULTCODE,ERROR_DETAIL)
			 VALUES
			 (P_TUM_TRANSACTION_ID,P_TUM_TIMESTAMP,0,
			 P_USERNAME,P_EDGE_DEALER_ID,
			 P_EDGE_TRANSACTION_ID,P_EDGE_TIMESTAMP,0,
			 P_TUM_DB_RESULT,V_ERROR_DETAIL);
COMMIT;
WHEN ACCOUNT_NOT_EXIST THEN
P_TUM_DB_RESULT:=12;
--We dont have ACCOUNT_ID and BALANCE values so inserting 0 instead...
INSERT INTO  TUM_BALANCE_CHECK_LOG_TBL
	   		 (ID,TUM_TIMESTAMP,ACCOUNT_ID,
			 USERNAME,EDGE_DEALER_ID,
             EDGE_TRANSACTION_ID ,EDGE_TIMESTAMP,BALANCE_AMOUNT,
			 DB_RESULTCODE,ERROR_DETAIL)
			 VALUES
			 (P_TUM_TRANSACTION_ID,P_TUM_TIMESTAMP,0,
			 P_USERNAME,P_EDGE_DEALER_ID,
			 P_EDGE_TRANSACTION_ID,P_EDGE_TIMESTAMP,0,
			 P_TUM_DB_RESULT,V_ERROR_DETAIL);

COMMIT;
WHEN OTHERS THEN
V_ERROR_DETAIL:=TO_CHAR(SQLCODE)||SUBSTR(SQLERRM,1,200);
P_TUM_DB_RESULT:=40; --SYSTEM ERROR
INSERT INTO  TUM_BALANCE_CHECK_LOG_TBL
	   		 (ID,TUM_TIMESTAMP,ACCOUNT_ID,
			 USERNAME,EDGE_DEALER_ID,
             EDGE_TRANSACTION_ID ,EDGE_TIMESTAMP,BALANCE_AMOUNT,
			 DB_RESULTCODE,ERROR_DETAIL)
			 VALUES
			 (P_TUM_TRANSACTION_ID,P_TUM_TIMESTAMP,V_ACCOUNT_ID,
			 P_USERNAME,P_EDGE_DEALER_ID,
			 P_EDGE_TRANSACTION_ID,P_EDGE_TIMESTAMP,P_TUM_BALANCE,
			 P_TUM_DB_RESULT,V_ERROR_DETAIL);
COMMIT;
sp_Errors(sysdate,'sp_BalanceCheck','PID='||to_char(P_TUM_TRANSACTION_ID)||',P_EDGE_TRANSACTION_ID='||to_char(P_EDGE_TRANSACTION_ID)||',P_DB_RESULTCODE='||TO_CHAR(P_TUM_DB_RESULT),V_ERROR_DETAIL);
END sp_BalanceCheck;

--*****************************************************************************************
--* Returns two parameters back : transaction id and resultcode
--* Resultcode 0 for success, and 80,81,40 for failure.
-- Existence and status of dealer has to be verified by app server
--*****************************************************************************************
PROCEDURE sp_PaymentArrived(P_ACCPAC_REF_NO IN VARCHAR2,
P_ACCPAC_USERNAME IN VARCHAR2,
P_ACCPAC_DEALER_ID IN VARCHAR2,
P_ACCPAC_ORDER_ID IN VARCHAR2,
P_ACCPAC_TIMESTAMP IN TIMESTAMP,
P_AMOUNT IN NUMBER,
P_TUM_TRANSACTION_ID OUT  NUMBER,
P_TUM_DB_RESULT OUT  NUMBER)
IS
V_REF_ERROR NUMBER (10):=0;
V_ORDER_ERROR NUMBER(10) :=0;
V_ERROR_DETAIL VARCHAR2(255):='None';
V_TUM_TIMESTAMP DATE;
V_DEALER_TYPE VARCHAR2(12);
BEGIN

SELECT SEQ_PAYMENT_ARRIVED.NEXTVAL
INTO P_TUM_TRANSACTION_ID --Also will be used as payment_id
FROM DUAL;

SELECT SYSDATE
INTO V_TUM_TIMESTAMP
FROM DUAL;

SELECT COUNT(*) INTO V_REF_ERROR
FROM TUM_ACCPAC_PAYMENTS_TBL
WHERE ACCPAC_REF_NO = P_ACCPAC_REF_NO;

SELECT COUNT(*) INTO V_ORDER_ERROR
FROM TUM_ACCPAC_PAYMENTS_TBL
WHERE ACCPAC_ORDER_ID = P_ACCPAC_ORDER_ID;

IF V_REF_ERROR != 0  THEN
   P_TUM_DB_RESULT := 80 ;
   V_ERROR_DETAIL :='Reference number is used before';
   ELSE
   	   IF V_ORDER_ERROR !=0 THEN
	   	  P_TUM_DB_RESULT := 81;
		  V_ERROR_DETAIL :='OrderId is used before';
	      ELSE
    				     INSERT INTO TUM_ACCPAC_PAYMENTS_TBL(
						 ID,TUM_TIMESTAMP,AMOUNT,ACCPAC_REF_NO,ACCPAC_USERNAME,
						 ACCPAC_DEALER_ID,ACCPAC_ORDER_ID,ACCPAC_TIMESTAMP,STATUS)
						 VALUES(P_TUM_TRANSACTION_ID,V_TUM_TIMESTAMP,P_AMOUNT,P_ACCPAC_REF_NO,P_ACCPAC_USERNAME,
						 P_ACCPAC_DEALER_ID,P_ACCPAC_ORDER_ID,P_ACCPAC_TIMESTAMP,'Pending');

						 INSERT INTO TUM_ARRIVED_PAYMENTS_LOG_TBL (
						 TUM_TRANSACTION_ID,ACCPAC_REF_NO,ACCPAC_ORDER_ID,
						 TUM_TIMESTAMP,AMOUNT,DB_RESULTCODE,ERROR_DETAIL)

						 VALUES (P_TUM_TRANSACTION_ID,P_ACCPAC_REF_NO,P_ACCPAC_ORDER_ID,
						 V_TUM_TIMESTAMP,P_AMOUNT,P_TUM_DB_RESULT,V_ERROR_DETAIL);
		END IF;
END IF;

COMMIT;
EXCEPTION
WHEN OTHERS THEN
ROLLBACK;
P_TUM_DB_RESULT := 40;
V_ERROR_DETAIL:=TO_CHAR(SQLCODE)||SUBSTR(SQLERRM,1,150);
INSERT INTO TUM_ARRIVED_PAYMENTS_LOG_TBL (
TUM_TRANSACTION_ID,ACCPAC_REF_NO,ACCPAC_ORDER_ID,
TUM_TIMESTAMP,AMOUNT,DB_RESULTCODE,ERROR_DETAIL)

VALUES (P_TUM_TRANSACTION_ID,P_ACCPAC_REF_NO,P_ACCPAC_ORDER_ID,
V_TUM_TIMESTAMP,P_AMOUNT,P_TUM_DB_RESULT,V_ERROR_DETAIL);
sp_Errors(sysdate,'sp_PaymentArrived','PID='||to_char(P_TUM_TRANSACTION_ID)||',P_ACCPAC_REF_NO='||to_char(P_ACCPAC_REF_NO)||',P_DB_RESULTCODE='||TO_CHAR(P_TUM_DB_RESULT),V_ERROR_DETAIL);
COMMIT;
END sp_PaymentArrived;
--*****************************************************************************************
--* return 5 parameters back TransactionId,BeforeBalance,AfterBalance,ResultCode and Alert
--* Resultcodes 0 for success 10,11,12,70,71,72,76,77,78,40 for failure.
--* Alert Code 0 for no alert,1 and 2 for normal and critical alerts.
--*****************************************************************************************

PROCEDURE sp_RechargeSubscriber
 ( P_ID  OUT NUMBER,P_TRANS_TIME IN DATE,P_TRANS_AMOUNT IN NUMBER ,
 P_SUBSCRIBER_MSISDN IN NUMBER ,P_USERNAME IN VARCHAR2,
 P_EDGE_DEALER_ID IN VARCHAR2,P_EDGE_SUBDEALER_ID IN VARCHAR2 ,
 P_EDGE_TRANSACTION_ID IN NUMBER,P_EDGE_TIMESTAMP IN DATE,P_BEFORE_BALANCE OUT NUMBER,
 P_AFTER_BALANCE OUT NUMBER,P_RESULT_CODE OUT NUMBER,P_ALERT OUT NUMBER)

 IS
 V_ACCPAC_DEALER_ID 					 TUM_DEALERS_TBL.ACCPAC_DEALER_ID%TYPE;
 V_TUM_DEALER_ID	    				 TUM_DEALERS_TBL.TUM_DEALER_ID%TYPE;
 V_MAX_AMOUNT_PER_DAY_AMOUNT  			 TUM_DEALER_ACCOUNT_TBL.MAX_AMOUNT_PER_DAY_AMOUNT%TYPE;
 V_ACCOUNT_ID             				 TUM_DEALER_ACCOUNT_TBL.ACCOUNT_ID%TYPE;
 V_ERROR_DETAIL							 TUM_TRANS_TBL.ERROR_DETAIL%TYPE;
 V_DAILY_INCLAST_BALANCE_IN_DAY			 TUM_DEALER_BALLIMIT_CHECK_TBL.DAILY_INCLAST_BALANCE_IN_DAY%TYPE;
 V_DAILY_LAST_TRANSACTION_COUNT          TUM_DEALER_BALLIMIT_CHECK_TBL.DAILY_LAST_TRANSACTION_COUNT%TYPE;
 V_MAX_TRANS_PER_DAY                     TUM_DEALER_ACCOUNT_TBL.MAX_TRANS_PER_DAY%TYPE;
 V_MAX_AMOUNT_PER_TRANS_AMOUNT			 TUM_DEALER_ACCOUNT_TBL.MAX_AMOUNT_PER_TRANS_AMOUNT%TYPE;
 V_MIN_AMOUNT_PER_TRANS_AMOUNT			 TUM_DEALER_ACCOUNT_TBL.MIN_AMOUNT_PER_TRANS_AMOUNT%TYPE;
 V_MIN_BAL_ALERT_AMOUNT					 TUM_DEALER_ACCOUNT_TBL.MIN_BAL_ALERT_AMOUNT%TYPE;
 V_MIN_BAL_CRIT_ALERT_AMOUNT			 TUM_DEALER_ACCOUNT_TBL.MIN_BAL_CRIT_ALERT_AMOUNT%TYPE;
 V_STATUS								 TUM_USER_TBL.STATUS%TYPE;
 V_TUM_TIMESTAMP						 DATE:=SYSDATE;
 P_INTERMEDIATE_RETURN_CODE				 NUMBER(2):=0;
 P_FINAL_RETURN_CODE					 NUMBER(2):=0;
 P_NEWREC_REQUIRED_BALLIMIT				 NUMBER(1):=0;
 V_DEALER_EXIST							 NUMBER(2):=0;
 V_USER_EXIST							 NUMBER(2):=0;
 V_DEALER_ACTIVE						 NUMBER(2):=0;
 USER_NOT_EXIST        			 		 EXCEPTION;
 USER_NOT_ACTIVE     			 		 EXCEPTION;
 DEALER_NOT_EXIST                      	 EXCEPTION;
 DEALER_NOT_ACTIVE     			 		 EXCEPTION;
 LESS_THEN_MIN_AMOUNT_PER_TRAN      	 EXCEPTION;
 MORE_THEN_MAX_AMOUNT_PER_TRAN      	 EXCEPTION;
 MORE_THEN_MAX_TR_CNT_PER_DAY			 EXCEPTION;
 MORE_THEN_MAX_AMOUNT_PER_DAY			 EXCEPTION;
 BALANCE_BELOW_ZERO						 EXCEPTION;
 BEGIN

 P_RESULT_CODE:=0;
 P_ALERT:=0;

 SELECT SEQ_RECHARGE_SUB.NEXTVAL
 INTO P_ID
 FROM DUAL;

 SELECT COUNT(*) INTO V_USER_EXIST
 FROM TUM_USER_TBL
 WHERE USERNAME=P_USERNAME
 AND STATUS = 'Active';
 IF V_USER_EXIST=0 THEN
 RAISE USER_NOT_EXIST;
 END IF;

 SELECT COUNT(*) INTO V_DEALER_ACTIVE
 FROM TUM_DEALERS_TBL
 WHERE EDGE_DEALER_ID=P_EDGE_DEALER_ID
 AND STATUS = 'Active';
 IF V_DEALER_ACTIVE=0 THEN
 RAISE DEALER_NOT_ACTIVE;
 END IF;

 SELECT COUNT(*) INTO V_DEALER_EXIST
 FROM TUMT.TUM_DEALERS_TBL
 WHERE EDGE_DEALER_ID = P_EDGE_DEALER_ID
 AND   DELETED=0;

 IF  V_DEALER_EXIST != 1 THEN
 RAISE DEALER_NOT_EXIST;
 ELSE
 SELECT ACCPAC_DEALER_ID,TUM_DEALER_ID
 INTO V_ACCPAC_DEALER_ID,V_TUM_DEALER_ID
 FROM TUMT.TUM_DEALERS_TBL
 WHERE EDGE_DEALER_ID = P_EDGE_DEALER_ID
 AND   DELETED=0;
 END IF;
--Main functionality goes here....
-- If there is no error than the log is written but not committed ,
--if there is an error no log is written.

 UPDATE TUM_DEALER_ACCOUNT_TBL
 SET BALANCE_AMOUNT=BALANCE_AMOUNT-P_TRANS_AMOUNT
 WHERE TUM_DEALER_ID=V_TUM_DEALER_ID
 RETURNING BALANCE_AMOUNT,MAX_AMOUNT_PER_DAY_AMOUNT,ACCOUNT_ID,MAX_TRANS_PER_DAY,MAX_AMOUNT_PER_TRANS_AMOUNT,
 MIN_AMOUNT_PER_TRANS_AMOUNT,MIN_BAL_ALERT_AMOUNT,MIN_BAL_CRIT_ALERT_AMOUNT
 INTO P_AFTER_BALANCE,V_MAX_AMOUNT_PER_DAY_AMOUNT,V_ACCOUNT_ID,V_MAX_TRANS_PER_DAY,V_MAX_AMOUNT_PER_TRANS_AMOUNT,
 V_MIN_AMOUNT_PER_TRANS_AMOUNT,V_MIN_BAL_ALERT_AMOUNT,V_MIN_BAL_CRIT_ALERT_AMOUNT ;

 P_BEFORE_BALANCE:=P_AFTER_BALANCE+P_TRANS_AMOUNT;
--------------------------------------------------------------------------------
 IF P_TRANS_AMOUNT<V_MIN_AMOUNT_PER_TRANS_AMOUNT THEN
 RAISE LESS_THEN_MIN_AMOUNT_PER_TRAN;
 END IF;

 IF  P_TRANS_AMOUNT>V_MAX_AMOUNT_PER_TRANS_AMOUNT THEN
 RAISE MORE_THEN_MAX_AMOUNT_PER_TRAN;
 END IF;

 IF P_AFTER_BALANCE<0 THEN
 RAISE BALANCE_BELOW_ZERO;
 END IF;


 IF	P_AFTER_BALANCE <V_MIN_BAL_ALERT_AMOUNT THEN
 P_ALERT:=1;
 ELSIF   P_AFTER_BALANCE<V_MIN_BAL_CRIT_ALERT_AMOUNT THEN
 P_ALERT:=2;
 END IF;

 SELECT COUNT(*) INTO P_NEWREC_REQUIRED_BALLIMIT
 FROM TUM_DEALER_BALLIMIT_CHECK_TBL
 WHERE TUM_DEALER_ID=V_TUM_DEALER_ID
 AND TO_CHAR(TIME_INFO,'DDMMYYYY')=TO_CHAR(SYSDATE,'DDMMYYYY');

 IF P_NEWREC_REQUIRED_BALLIMIT = 0 THEN
 INSERT INTO TUM_DEALER_BALLIMIT_CHECK_TBL
 COLUMNS(ID,TIME_INFO,TUM_DEALER_ID,DAILY_INCLAST_BALANCE_IN_DAY,DAILY_LAST_TRANSACTION_COUNT)
 VALUES (P_ID,V_TUM_TIMESTAMP,V_TUM_DEALER_ID,0,0);
 END IF;

 UPDATE  TUM_DEALER_BALLIMIT_CHECK_TBL
 SET   ID=P_ID,
       DAILY_INCLAST_BALANCE_IN_DAY =DAILY_INCLAST_BALANCE_IN_DAY+P_TRANS_AMOUNT,
 	   DAILY_LAST_TRANSACTION_COUNT=NVL(DAILY_LAST_TRANSACTION_COUNT,0)+1
 WHERE TUM_DEALER_ID=V_TUM_DEALER_ID
 AND TO_CHAR(TIME_INFO,'DDMMYYYY')=TO_CHAR(SYSDATE,'DDMMYYYY')
 RETURNING DAILY_INCLAST_BALANCE_IN_DAY,  DAILY_LAST_TRANSACTION_COUNT
 INTO    V_DAILY_INCLAST_BALANCE_IN_DAY,V_DAILY_LAST_TRANSACTION_COUNT;

 IF V_DAILY_LAST_TRANSACTION_COUNT>V_MAX_TRANS_PER_DAY THEN
 RAISE MORE_THEN_MAX_TR_CNT_PER_DAY;
 END IF;

 IF V_DAILY_INCLAST_BALANCE_IN_DAY>V_MAX_AMOUNT_PER_DAY_AMOUNT THEN
 RAISE MORE_THEN_MAX_AMOUNT_PER_DAY;
 END IF;

 sp_RechargeIntermediateTranLog( P_ID,P_EDGE_DEALER_ID,P_EDGE_TRANSACTION_ID,P_EDGE_TIMESTAMP,V_TUM_TIMESTAMP,P_RESULT_CODE,'SUCCESS',P_INTERMEDIATE_RETURN_CODE);
 sp_RechargeFinalTranLog( P_ID ,P_EDGE_TRANSACTION_ID,V_TUM_TIMESTAMP,
 P_EDGE_TIMESTAMP, P_EDGE_DEALER_ID,V_TUM_DEALER_ID,
 P_EDGE_SUBDEALER_ID,P_USERNAME,P_SUBSCRIBER_MSISDN,
 P_TRANS_AMOUNT ,P_BEFORE_BALANCE,P_AFTER_BALANCE,
 P_RESULT_CODE,V_ACCOUNT_ID,V_ERROR_DETAIL,
 0,P_ALERT,P_FINAL_RETURN_CODE);
 --Everything was fine, now waiting for COMMIT from app server...
 -- COMMIT;

 EXCEPTION
 WHEN DEALER_NOT_EXIST THEN
 ROLLBACK;
 P_RESULT_CODE :=10;
 P_BEFORE_BALANCE :=0;
 P_AFTER_BALANCE:=0;
 sp_RechargeIntermediateTranLog( P_ID,P_EDGE_DEALER_ID,P_EDGE_TRANSACTION_ID,P_EDGE_TIMESTAMP,V_TUM_TIMESTAMP,P_RESULT_CODE,'DEALER_NOT_EXIST',P_INTERMEDIATE_RETURN_CODE);

 WHEN DEALER_NOT_ACTIVE THEN
 ROLLBACK;
 P_RESULT_CODE :=11;
 P_BEFORE_BALANCE :=0;
 P_AFTER_BALANCE:=0;
 sp_RechargeIntermediateTranLog( P_ID,P_EDGE_DEALER_ID,P_EDGE_TRANSACTION_ID,P_EDGE_TIMESTAMP,V_TUM_TIMESTAMP,P_RESULT_CODE,'DEALER_NOT_ACTIVE',P_INTERMEDIATE_RETURN_CODE);

 WHEN USER_NOT_EXIST THEN
 ROLLBACK;
 P_RESULT_CODE :=12;
 P_BEFORE_BALANCE :=0;
 P_AFTER_BALANCE:=0;
 sp_RechargeIntermediateTranLog( P_ID,P_EDGE_DEALER_ID,P_EDGE_TRANSACTION_ID,P_EDGE_TIMESTAMP,V_TUM_TIMESTAMP,P_RESULT_CODE,'USER_NOT_EXIST',P_INTERMEDIATE_RETURN_CODE);

 WHEN BALANCE_BELOW_ZERO THEN
 ROLLBACK;
 P_RESULT_CODE:=70;
 P_AFTER_BALANCE:=P_TRANS_AMOUNT+P_AFTER_BALANCE;
 P_BEFORE_BALANCE:=P_AFTER_BALANCE;
 sp_RechargeIntermediateTranLog( P_ID,P_EDGE_DEALER_ID,P_EDGE_TRANSACTION_ID,P_EDGE_TIMESTAMP,V_TUM_TIMESTAMP,P_RESULT_CODE,'BALANCE_BELOW_ZERO',P_INTERMEDIATE_RETURN_CODE);

 WHEN LESS_THEN_MIN_AMOUNT_PER_TRAN THEN
 ROLLBACK;
 P_RESULT_CODE :=71;
 P_AFTER_BALANCE:=P_BEFORE_BALANCE;
 sp_RechargeIntermediateTranLog( P_ID,P_EDGE_DEALER_ID,P_EDGE_TRANSACTION_ID,P_EDGE_TIMESTAMP,V_TUM_TIMESTAMP,P_RESULT_CODE,'LESS_THEN_MIN_AMOUNT_PER_TRAN',P_INTERMEDIATE_RETURN_CODE);

 WHEN MORE_THEN_MAX_AMOUNT_PER_TRAN THEN
 ROLLBACK;
 P_RESULT_CODE :=72;
 P_AFTER_BALANCE:=P_BEFORE_BALANCE;
 sp_RechargeIntermediateTranLog( P_ID,P_EDGE_DEALER_ID,P_EDGE_TRANSACTION_ID,P_EDGE_TIMESTAMP,V_TUM_TIMESTAMP,P_RESULT_CODE,'MORE_THEN_MAX_AMOUNT_PER_TRAN',P_INTERMEDIATE_RETURN_CODE);


 WHEN MORE_THEN_MAX_AMOUNT_PER_DAY THEN
 ROLLBACK;
 P_RESULT_CODE :=73;
 P_AFTER_BALANCE:=P_BEFORE_BALANCE;
 sp_RechargeIntermediateTranLog( P_ID,P_EDGE_DEALER_ID,P_EDGE_TRANSACTION_ID,P_EDGE_TIMESTAMP,V_TUM_TIMESTAMP,P_RESULT_CODE,'MORE_THEN_MAX_AMOUNT_PER_DAY',P_INTERMEDIATE_RETURN_CODE);

 WHEN MORE_THEN_MAX_TR_CNT_PER_DAY THEN
 ROLLBACK;
 P_RESULT_CODE :=74;
 P_AFTER_BALANCE:=P_BEFORE_BALANCE;
 sp_RechargeIntermediateTranLog( P_ID,P_EDGE_DEALER_ID,P_EDGE_TRANSACTION_ID,P_EDGE_TIMESTAMP,V_TUM_TIMESTAMP,P_RESULT_CODE,'MORE_THEN_MAX_TR_CNT_PER_DAY',P_INTERMEDIATE_RETURN_CODE);

 WHEN OTHERS THEN
 ROLLBACK;
 V_ERROR_DETAIL :=TO_CHAR(SQLCODE)||SUBSTR(SQLERRM,1,150);
 P_RESULT_CODE:=40;
 P_AFTER_BALANCE:=P_BEFORE_BALANCE;
 sp_RechargeIntermediateTranLog( P_ID,P_EDGE_DEALER_ID,P_EDGE_TRANSACTION_ID,P_EDGE_TIMESTAMP,V_TUM_TIMESTAMP,P_RESULT_CODE,V_ERROR_DETAIL,P_INTERMEDIATE_RETURN_CODE);
 sp_Errors(sysdate,'sp_RechargeSubscriber','PID='||to_char(P_ID)||',P_EDGE_TRANSACTION_ID='||to_char(P_EDGE_TRANSACTION_ID)||',P_DB_RESULTCODE='||TO_CHAR(P_RESULT_CODE),V_ERROR_DETAIL);
END sp_RechargeSubscriber;

--*****************************************************************************************
--*
--*
--*
--*****************************************************************************************
PROCEDURE sp_RechargeFinalTranLog
(P_ID IN NUMBER,P_EDGE_TRANSACTION_ID IN NUMBER,P_TUM_TIMESTAMP IN DATE,
P_EDGE_TIMESTAMP IN DATE,P_EDGE_DEALER_ID IN VARCHAR2,P_TUM_DEALER_ID IN VARCHAR2,
P_EDGE_SUBDEALER_ID IN VARCHAR2,P_USERNAME IN VARCHAR2,P_SUBS_MSISDN IN VARCHAR2,
P_TRANS_AMOUNT IN NUMBER,P_BEFORE_BALANCE IN NUMBER,P_AFTER_BALANCE IN NUMBER,
P_DB_RESULTCODE IN NUMBER,P_ACCOUNT_ID IN NUMBER,P_ERROR_DETAIL IN VARCHAR2,
P_STATUS IN NUMBER,P_ALERT_CODE IN NUMBER,P_FINAL_RETURN_CODE OUT NUMBER)
IS
V_ERROR_DETAIL VARCHAR2(255);
BEGIN
INSERT INTO TUM_TRANS_TBL
COLUMNS(ID,EDGE_TRANSACTION_ID,TUM_DEALER_ID,TUM_TIMESTAMP,EDGE_TIMESTAMP,EDGE_DEALER_ID,EDGE_SUBDEALER_ID,USERNAME,SUBSCRIBER_MSISDN,
TRANS_AMOUNT,BEFORE_BALANCE,AFTER_BALANCE,DB_RESULTCODE,ACCOUNT_ID,ERROR_DETAIL,STATUS,ALERT_CODE,RECON_ID)
VALUES(P_ID,P_EDGE_TRANSACTION_ID,P_TUM_DEALER_ID,P_TUM_TIMESTAMP,P_EDGE_TIMESTAMP,P_EDGE_DEALER_ID,P_EDGE_SUBDEALER_ID,P_USERNAME,P_SUBS_MSISDN,
P_TRANS_AMOUNT,P_BEFORE_BALANCE,P_AFTER_BALANCE,P_DB_RESULTCODE,P_ACCOUNT_ID,P_ERROR_DETAIL,P_STATUS,P_ALERT_CODE,0);
P_FINAL_RETURN_CODE :=0;
EXCEPTION
WHEN OTHERS THEN
V_ERROR_DETAIL :=TO_CHAR(SQLCODE)||SUBSTR(SQLERRM,1,150);
sp_Errors(sysdate,'sp_RechargeFinalTranLog','PID='||to_char(P_ID)||',P_EDGE_TRANSACTION_ID='||to_char(P_EDGE_TRANSACTION_ID)||',P_DB_RESULTCODE='||TO_CHAR(P_DB_RESULTCODE),V_ERROR_DETAIL);
P_FINAL_RETURN_CODE :=1;
END sp_RechargeFinalTranLog;
--*****************************************************************************************
--*
--*
--*
--*****************************************************************************************

PROCEDURE sp_RechargeIntermediateTranLog
(P_ID IN NUMBER ,P_EDGE_DEALER_ID IN VARCHAR2,P_EDGE_TRANSACTION_ID IN NUMBER,
 P_EDGE_TIMESTAMP IN DATE,P_TUM_TIMESTAMP IN DATE,P_DB_RESULTCODE IN NUMBER,
 P_DB_RESULTSTRING IN VARCHAR2,P_RETURNCODE OUT NUMBER) IS
PRAGMA AUTONOMOUS_TRANSACTION;
V_ERROR_DETAIL VARCHAR2(255);
BEGIN
INSERT INTO TUM_RECHARGE_INTERMEDIATE_LOG (TUM_TRANSACTION_ID,EDGE_DEALER_ID,EDGE_TRANSACTION_ID,
	   									   EDGE_TIMESTAMP,TUM_TIMESTAMP,DB_RESULTCODE,DB_RESULTSTRING)
VALUES									  (P_ID,P_EDGE_DEALER_ID,P_EDGE_TRANSACTION_ID,
										   P_EDGE_TIMESTAMP,P_TUM_TIMESTAMP,P_DB_RESULTCODE,P_DB_RESULTSTRING);
COMMIT;
P_RETURNCODE :=0;
EXCEPTION
WHEN OTHERS THEN
P_RETURNCODE :=1;
V_ERROR_DETAIL :=TO_CHAR(SQLCODE)||SUBSTR(SQLERRM,1,150);
sp_Errors(sysdate,'sp_RechargeIntermediateTranLog','PID='||to_char(P_ID)||',P_EDGE_TRANSACTION_ID='||to_char(P_EDGE_TRANSACTION_ID)||',P_DB_RESULTSTRING='||P_DB_RESULTSTRING,V_ERROR_DETAIL);
END sp_RechargeIntermediateTranLog;
--*****************************************************************************************
--*
--*
--*
--*****************************************************************************************

PROCEDURE sp_FinalCSResult(P_ID IN NUMBER, P_CS_RESULT IN NUMBER, P_CS_TIMESTAMP IN DATE,
P_BEFORE_BALANCE IN NUMBER,P_AFTER_BALANCE IN NUMBER)
IS
PRAGMA AUTONOMOUS_TRANSACTION;
V_TUM_TRANSACTION_ID NUMBER(38):=0;
V_ERROR_DETAIL VARCHAR2(255);
BEGIN
UPDATE TUM_RECHARGE_INTERMEDIATE_LOG
SET CS_RESULTCODE = P_CS_RESULT,CS_TIMESTAMP = P_CS_TIMESTAMP,
BEFORE_BALANCE = P_BEFORE_BALANCE,
AFTER_BALANCE = P_AFTER_BALANCE
WHERE TUM_TRANSACTION_ID = P_ID
RETURNING TUM_TRANSACTION_ID INTO V_TUM_TRANSACTION_ID;
IF NVL(V_TUM_TRANSACTION_ID,0) =0 THEN
sp_Errors(sysdate,'sp_FinalCSResult','PID='||to_char(P_ID)||',P_CS_RESULT='||to_char(P_CS_RESULT)||',P_CS_TIMESTAMP='||to_char(P_CS_TIMESTAMP,'DD/MM/RRRR HH24:MI:SS'),'PID Could not be found in intermediate logs table');
END IF;
COMMIT;

EXCEPTION
WHEN OTHERS THEN
V_ERROR_DETAIL :=TO_CHAR(SQLCODE)||SUBSTR(SQLERRM,1,150);
sp_Errors(sysdate,'sp_FinalCSResult','PID='||to_char(P_ID)||',P_CS_RESULT='||to_char(P_CS_RESULT)||',P_CS_TIMESTAMP='||to_char(P_CS_TIMESTAMP,'DD/MM/RRRR HH24:MI:SS'),V_ERROR_DETAIL);
END sp_FinalCSResult;

--*****************************************************************************************
--*
--*
--*
--*****************************************************************************************

PROCEDURE sp_Errors(P_DATEOF IN DATE,P_SP IN VARCHAR2,P_PARAMETER_SET IN VARCHAR2,P_ERROR_STRING IN VARCHAR2)
IS
PRAGMA AUTONOMOUS_TRANSACTION;
--sp_CSPassNotFoundLog (V_RECON_ID,V_RECON_STARTED,V_RECON_SCOPE,P_TRAN_CURSOR.ORIGINTRANSACTIONID,P_TRAN_CURSOR.EXTERNALDATA1,V_RECON_STATUS,V_ERROR_DETAIL)
BEGIN
INSERT INTO TUM_ERRORS COLUMNS(DATEOF,SP,ERROR_STRING,PARAMETER_SET) VALUES(P_DATEOF,P_SP,P_ERROR_STRING,P_PARAMETER_SET);
COMMIT;
END sp_Errors;
--*****************************************************************************************
--* return 4 parameters TransactionId,Resultcode,before balance and after balance
--* resultcode 0 for success ,10,11,12,40,75 for failure.
--*
--*****************************************************************************************

PROCEDURE sp_PaymentRegister
(P_USERNAME IN VARCHAR2,P_EDGE_TRANSACTION_ID IN NUMBER,P_TUM_PAYMENT_ID IN NUMBER,
P_EDGE_DEALER_ID IN VARCHAR2,P_EDGE_TIMESTAMP IN DATE,P_ERP_REFERENCE IN VARCHAR2,
P_ERP_ORDER_ID IN VARCHAR2,P_ERP_AMOUNT IN NUMBER, P_TUM_TRANSACTION_ID OUT NUMBER,
P_DB_RESULTCODE OUT NUMBER,P_BALANCE_BEFORE OUT NUMBER,P_BALANCE_AFTER OUT NUMBER)
IS
V_ACCPAC_DEALER_ID 		TUM_DEALERS_TBL.ACCPAC_DEALER_ID%TYPE;
V_TUM_DEALER_ID	    	TUM_DEALERS_TBL.TUM_DEALER_ID%TYPE;
USER_NOT_EXIST 			EXCEPTION;
DEALER_NOT_ACTIVE		EXCEPTION;
DEALER_NOT_EXIST		EXCEPTION;
PAYMENT_NOT_EXIST		EXCEPTION;
V_TUM_TIMESTAMP			DATE:=SYSDATE;
V_DEALER_EXIST			NUMBER(1):=0;
V_DEALER_ACTIVE			NUMBER(1):=0;
V_USER_EXIST			NUMBER(1):=0;
V_PAYMENT_EXIST			NUMBER(1):=0;
V_STATUS				VARCHAR2(10):='';
V_ERROR_DETAIL			VARCHAR2(255):='None';

BEGIN

 P_DB_RESULTCODE:=0;
 P_BALANCE_BEFORE:=0;
 P_BALANCE_AFTER :=0;



 SELECT SEQ_PAYMENT_REGISTER.NEXTVAL
 INTO P_TUM_TRANSACTION_ID
 FROM DUAL;

 SELECT COUNT(*) INTO V_USER_EXIST
 FROM TUM_USER_TBL
 WHERE USERNAME=P_USERNAME AND STATUS ='Active' ;
 IF V_USER_EXIST=0 THEN
 RAISE USER_NOT_EXIST;
 END IF;

 SELECT COUNT(*) INTO V_DEALER_ACTIVE
 FROM TUM_DEALERS_TBL
 WHERE EDGE_DEALER_ID=P_EDGE_DEALER_ID
 AND STATUS = 'Active';
 IF V_DEALER_ACTIVE=0 THEN
 RAISE DEALER_NOT_ACTIVE;
 END IF;

 SELECT COUNT(*) INTO V_DEALER_EXIST
 FROM TUMT.TUM_DEALERS_TBL
 WHERE EDGE_DEALER_ID = P_EDGE_DEALER_ID
 AND   DELETED=0;

  IF V_DEALER_EXIST != 1 THEN
  RAISE DEALER_NOT_EXIST;
  ELSE
  SELECT ACCPAC_DEALER_ID,TUM_DEALER_ID
  INTO V_ACCPAC_DEALER_ID,V_TUM_DEALER_ID
  FROM TUMT.TUM_DEALERS_TBL
  WHERE EDGE_DEALER_ID = P_EDGE_DEALER_ID
  AND   DELETED=0;
  END IF;


 SELECT COUNT(*) INTO V_PAYMENT_EXIST
 FROM TUM_ACCPAC_PAYMENTS_TBL
 WHERE ID = P_TUM_PAYMENT_ID
 AND ACCPAC_REF_NO = P_ERP_REFERENCE
 AND ACCPAC_ORDER_ID = P_ERP_ORDER_ID
 AND AMOUNT = P_ERP_AMOUNT
 AND STATUS = 'Pending';

 	IF V_PAYMENT_EXIST !=1 THEN
 	    RAISE PAYMENT_NOT_EXIST;
  	ELSE

		UPDATE TUM_DEALER_ACCOUNT_TBL
 		SET BALANCE_AMOUNT=BALANCE_AMOUNT+P_ERP_AMOUNT
 		WHERE TUM_DEALER_ID = V_TUM_DEALER_ID
 		RETURNING BALANCE_AMOUNT INTO P_BALANCE_AFTER;

		P_BALANCE_BEFORE := P_BALANCE_AFTER-P_ERP_AMOUNT;

 		UPDATE TUM_ACCPAC_PAYMENTS_TBL
 		SET REGISTERING_TRANSACTION_ID = P_TUM_TRANSACTION_ID,
 		REGISTERING_TIMESTAMP = V_TUM_TIMESTAMP,
 		EDGE_DEALER_ID = P_EDGE_DEALER_ID,
 		EDGE_TRANSACTION_ID = P_EDGE_TRANSACTION_ID,
 		EDGE_TIMESTAMP = P_EDGE_TIMESTAMP,
 		STATUS = 'Registered'
		WHERE ID = P_TUM_PAYMENT_ID
		AND ACCPAC_REF_NO = P_ERP_REFERENCE
 		AND ACCPAC_ORDER_ID = P_ERP_ORDER_ID
 		AND AMOUNT = P_ERP_AMOUNT
 		AND STATUS = 'Pending';

 		INSERT INTO TUM_RGSTERED_PAYMENTS_LOG_TBL
		(REGISTERING_TRANSACTION_ID,EDGE_TRANSACTION_ID,TUM_PAYMENT_ID,EDGE_DEALER_ID,
	 	ACCPAC_REF_NO,ACCPAC_ORDER_ID,TUM_TIMESTAMP,EDGE_TIMESTAMP,
	 	AMOUNT,BEFORE_BALANCE,AFTER_BALANCE,ERROR_DETAIL)
	 	VALUES
	 	(P_TUM_TRANSACTION_ID,P_EDGE_TRANSACTION_ID,P_TUM_PAYMENT_ID,P_EDGE_DEALER_ID,
	  	P_ERP_REFERENCE,P_ERP_ORDER_ID,V_TUM_TIMESTAMP,P_EDGE_TIMESTAMP,
	  	P_ERP_AMOUNT,P_BALANCE_BEFORE,P_BALANCE_AFTER,'User : '||P_USERNAME);
	COMMIT;
 	END IF;

EXCEPTION
WHEN USER_NOT_EXIST THEN
ROLLBACK;
P_DB_RESULTCODE:=12;
V_ERROR_DETAIL := 'User does not exist/active (TUM_USER_TBL)';
 		INSERT INTO TUM_RGSTERED_PAYMENTS_LOG_TBL
		(REGISTERING_TRANSACTION_ID,EDGE_TRANSACTION_ID,TUM_PAYMENT_ID,EDGE_DEALER_ID,
	 	ACCPAC_REF_NO,ACCPAC_ORDER_ID,TUM_TIMESTAMP,EDGE_TIMESTAMP,
	 	AMOUNT,BEFORE_BALANCE,AFTER_BALANCE,ERROR_DETAIL)
	 	VALUES
	 	(P_TUM_TRANSACTION_ID,P_EDGE_TRANSACTION_ID,P_TUM_PAYMENT_ID,P_EDGE_DEALER_ID,
	  	P_ERP_REFERENCE,P_ERP_ORDER_ID,V_TUM_TIMESTAMP,P_EDGE_TIMESTAMP,
	  	P_ERP_AMOUNT,P_BALANCE_BEFORE,P_BALANCE_AFTER,'User : '||P_USERNAME);
COMMIT;

WHEN DEALER_NOT_ACTIVE THEN
ROLLBACK;
P_DB_RESULTCODE:=11;
V_ERROR_DETAIL := 'Dealer is not active (TUM_USER_TBL.STATUS)';
 		INSERT INTO TUM_RGSTERED_PAYMENTS_LOG_TBL
		(REGISTERING_TRANSACTION_ID,EDGE_TRANSACTION_ID,TUM_PAYMENT_ID,EDGE_DEALER_ID,
	 	ACCPAC_REF_NO,ACCPAC_ORDER_ID,TUM_TIMESTAMP,EDGE_TIMESTAMP,
	 	AMOUNT,BEFORE_BALANCE,AFTER_BALANCE,ERROR_DETAIL)
	 	VALUES
	 	(P_TUM_TRANSACTION_ID,P_EDGE_TRANSACTION_ID,P_TUM_PAYMENT_ID,P_EDGE_DEALER_ID,
	  	P_ERP_REFERENCE,P_ERP_ORDER_ID,V_TUM_TIMESTAMP,P_EDGE_TIMESTAMP,
	  	P_ERP_AMOUNT,P_BALANCE_BEFORE,P_BALANCE_AFTER,'User : '||P_USERNAME);
COMMIT;

WHEN DEALER_NOT_EXIST THEN
ROLLBACK;
P_DB_RESULTCODE:=10;
V_ERROR_DETAIL := 'Dealer could not be found (TUM_DEALERS_TBL)';
 		INSERT INTO TUM_RGSTERED_PAYMENTS_LOG_TBL
		(REGISTERING_TRANSACTION_ID,EDGE_TRANSACTION_ID,TUM_PAYMENT_ID,EDGE_DEALER_ID,
	 	ACCPAC_REF_NO,ACCPAC_ORDER_ID,TUM_TIMESTAMP,EDGE_TIMESTAMP,
	 	AMOUNT,BEFORE_BALANCE,AFTER_BALANCE,ERROR_DETAIL)
	 	VALUES
	 	(P_TUM_TRANSACTION_ID,P_EDGE_TRANSACTION_ID,P_TUM_PAYMENT_ID,P_EDGE_DEALER_ID,
	  	P_ERP_REFERENCE,P_ERP_ORDER_ID,V_TUM_TIMESTAMP,P_EDGE_TIMESTAMP,
	  	P_ERP_AMOUNT,P_BALANCE_BEFORE,P_BALANCE_AFTER,'User : '||P_USERNAME);
COMMIT;

WHEN PAYMENT_NOT_EXIST THEN
ROLLBACK;
P_DB_RESULTCODE:=75;
V_ERROR_DETAIL := 'Payment could not be located (TUM_ACCPAC_PAYMENTS_TBL)';
 		INSERT INTO TUM_RGSTERED_PAYMENTS_LOG_TBL
		(REGISTERING_TRANSACTION_ID,EDGE_TRANSACTION_ID,TUM_PAYMENT_ID,EDGE_DEALER_ID,
	 	ACCPAC_REF_NO,ACCPAC_ORDER_ID,TUM_TIMESTAMP,EDGE_TIMESTAMP,
	 	AMOUNT,BEFORE_BALANCE,AFTER_BALANCE,ERROR_DETAIL)
	 	VALUES
	 	(P_TUM_TRANSACTION_ID,P_EDGE_TRANSACTION_ID,P_TUM_PAYMENT_ID,P_EDGE_DEALER_ID,
	  	P_ERP_REFERENCE,P_ERP_ORDER_ID,V_TUM_TIMESTAMP,P_EDGE_TIMESTAMP,
	  	P_ERP_AMOUNT,P_BALANCE_BEFORE,P_BALANCE_AFTER,'User : '||P_USERNAME);
COMMIT;

WHEN OTHERS THEN
ROLLBACK;
P_DB_RESULTCODE:=40;
V_ERROR_DETAIL :=TO_CHAR(SQLCODE)||SUBSTR(SQLERRM,1,150);
 		INSERT INTO TUM_RGSTERED_PAYMENTS_LOG_TBL
		(REGISTERING_TRANSACTION_ID,EDGE_TRANSACTION_ID,TUM_PAYMENT_ID,EDGE_DEALER_ID,
	 	ACCPAC_REF_NO,ACCPAC_ORDER_ID,TUM_TIMESTAMP,EDGE_TIMESTAMP,
	 	AMOUNT,BEFORE_BALANCE,AFTER_BALANCE,ERROR_DETAIL)
	 	VALUES
	 	(P_TUM_TRANSACTION_ID,P_EDGE_TRANSACTION_ID,P_TUM_PAYMENT_ID,P_EDGE_DEALER_ID,
	  	P_ERP_REFERENCE,P_ERP_ORDER_ID,V_TUM_TIMESTAMP,P_EDGE_TIMESTAMP,
	  	P_ERP_AMOUNT,P_BALANCE_BEFORE,P_BALANCE_AFTER,'User : '||P_USERNAME||' , '||V_ERROR_DETAIL);
sp_Errors(sysdate,'sp_PaymentRegister','PID='||to_char(P_TUM_TRANSACTION_ID)||',TUM_PAYMENT_ID='||to_char(P_TUM_PAYMENT_ID)||',EDGE_TRANSACTION_ID='||to_char(P_EDGE_TRANSACTION_ID),V_ERROR_DETAIL);
COMMIT;
END sp_PaymentRegister;

--*****************************************************************************************
--*
--*
--*
--*****************************************************************************************

PROCEDURE sp_Recon (P_RECON_DATE in DATE)
IS

CURSOR CS_TRAN_CURSOR IS SELECT EXTERNALDATA1,EXTERNALDATA2, ORIGINTRANSACTIONID ,ACCOUNT_NUMBER,TRANSACTION_AMOUNT,ORIGINTIMESTAMP
FROM emmuser.TUM_CS_TRANSACTIONS
WHERE TRUNC(TIMESTAMPCS)= to_date(P_RECON_DATE,'DD/MM/RRRR')
AND PROCESSED = 0;


V_RECON_STARTED DATE ;
V_RECON_FINISHED DATE;
V_HK1_FINISHED DATE;
V_HK2_FINISHED DATE;
V_HK3_FINISHED DATE;
V_HK_STARTED DATE;
V_HK_FINISHED DATE;
V_RECON_ID NUMBER(12):=0;
V_COUNT_SUCC NUMBER(12):=0; --Success
V_COUNT_TRPR NUMBER(12):=0; --Transaction ID Problem
V_COUNT_AMPR NUMBER(12):=0; --Amount problem
V_COUNT_RSPR NUMBER(12):=0; --Recon Status Problem
V_COUNT_TSPR NUMBER(12):=0; --Transaction Status Problem
V_COUNT_TRNF NUMBER(12):=0; --CS Transaction not found
V_COUNT_ERRO NUMBER(12):=0; --Total OF ALL ERRORS;
V_COUNT NUMBER(1) :=0;      --1 IF TRANSACTION FOUND IN TUM_TRANS_TBL 0 OTHERWISE...
P_TRAN_CURSOR CS_TRAN_CURSOR%ROWTYPE;
V_TRANS_AMOUNT NUMBER(6) :=0;
V_RECON_STATUS NUMBER(2):=99;
V_EDGE_TRANSACTION_ID NUMBER(38) :=0;
V_ERROR_DETAIL VARCHAR2(255):='';
V_ERROR_DETAIL1 varchar2(255);
V_RECON_SCOPE DATE;
V_STATUS NUMBER(1);
V_SUBCRIBER_MSISDN VARCHAR2(9);
V_OUT_STR VARCHAR2(500) :='';
V_TUM_TRANSACTION_ID NUMBER(38):=0;
V_TUM_DEALER_ID NUMBER(38):=0;
V_RECON_RESULT NUMBER(2);
V_DEALER_TYPE VARCHAR2(15):='';
V_COUNT_CS_SCOPE NUMBER(12):=0;
BEGIN
SELECT SEQ_RECON_CSPASS.NEXTVAL INTO V_RECON_ID FROM DUAL;
SELECT SYSDATE INTO V_RECON_STARTED FROM DUAL;
V_RECON_SCOPE  := P_RECON_DATE;
SELECT COUNT(*) INTO V_COUNT_CS_SCOPE FROM EMMUSER.TUM_CS_TRANSACTIONS
WHERE TRUNC(TIMESTAMPCS) = to_date(P_RECON_DATE,'DD/MM/RRRR')
AND PROCESSED = 0;


  OPEN CS_TRAN_CURSOR;
  LOOP
    FETCH CS_TRAN_CURSOR INTO P_TRAN_CURSOR;
    EXIT WHEN CS_TRAN_CURSOR%NOTFOUND;
	V_COUNT :=0;
	SELECT COUNT(*) INTO V_COUNT FROM TUM_TRANS_TBL WHERE ID = P_TRAN_CURSOR.EXTERNALDATA2;

	IF V_COUNT =1 THEN

	SELECT ID,EDGE_TRANSACTION_ID,TRANS_AMOUNT,RECON_STATUS,STATUS,SUBSCRIBER_MSISDN,TUM_DEALER_ID
	INTO V_TUM_TRANSACTION_ID,V_EDGE_TRANSACTION_ID,V_TRANS_AMOUNT,V_RECON_STATUS ,V_STATUS,V_SUBCRIBER_MSISDN,V_TUM_DEALER_ID
	FROM TUM_TRANS_TBL
	WHERE ID = P_TRAN_CURSOR.EXTERNALDATA2;


		   	 IF ((V_EDGE_TRANSACTION_ID = P_TRAN_CURSOR.ORIGINTRANSACTIONID)
		   	 AND (V_TRANS_AMOUNT=P_TRAN_CURSOR.EXTERNALDATA1)
		   	 AND (V_RECON_STATUS = 0)
		  	 AND (V_STATUS = 0))

		   	 THEN
		   	 UPDATE TUM_TRANS_TBL SET RECON_STATUS = 1,RECON_ID = V_RECON_ID
	       	 WHERE ID = P_TRAN_CURSOR.EXTERNALDATA2; --AND EDGE_TRANSACTION_ID = P_TRAN_CURSOR.ORIGINTRANSACTIONID AND TRANS_AMOUNT = P_TRAN_CURSOR.EXTERNALDATA1;
		  	 V_COUNT_SUCC := V_COUNT_SUCC+1;

		   	 ELSE
		   	   	 V_COUNT_ERRO := V_COUNT_ERRO+1;
				 IF V_EDGE_TRANSACTION_ID != P_TRAN_CURSOR.ORIGINTRANSACTIONID THEN
			   	 V_ERROR_DETAIL := '3RDPARTYTranID couldnt be found in TUM_TRANS_TBL';
			   	 V_RECON_RESULT :=2;
			   	 V_COUNT_TRPR := V_COUNT_TRPR+1;
			   	 END IF;

			   	 IF V_TRANS_AMOUNT != P_TRAN_CURSOR.EXTERNALDATA1 THEN
			   	 V_ERROR_DETAIL := 'Transaction Amount does not match';
			   	 V_RECON_RESULT :=3;
			   	 V_COUNT_AMPR := V_COUNT_AMPR+1;
			   	 END IF;

			   	 IF V_RECON_STATUS != 0 THEN
			   	 V_ERROR_DETAIL := 'Recon status was not equal to zero:'||TO_CHAR(V_RECON_STATUS);
			   	 V_RECON_RESULT :=4;
			   	 V_COUNT_RSPR := V_COUNT_RSPR+1;
			   	 END IF;

			   	 IF V_STATUS != 0 THEN
			   	 V_ERROR_DETAIL := 'Transaction Status was not equal to zero';
			   	 V_RECON_RESULT :=5;
			   	 V_COUNT_TSPR := V_COUNT_TSPR+1;
			   	 END IF;

		   	     UPDATE TUM_TRANS_TBL SET RECON_STATUS = V_RECON_RESULT,RECON_ID = V_RECON_ID
           	     WHERE ID = P_TRAN_CURSOR.EXTERNALDATA2; --AND EDGE_TRANSACTION_ID = P_TRAN_CURSOR.ORIGINTRANSACTIONID AND TRANS_AMOUNT = P_TRAN_CURSOR.EXTERNALDATA1;
 			     --sp_CSPassFoundButError (
		     END IF;
		     --If we are able to find the record ;successful or not it has to be in the output file for EDGE
			 	  	 	   V_DEALER_TYPE := sp_GetDealerType (V_TUM_DEALER_ID);
			 			   IF  V_DEALER_TYPE='EDGEDealer' THEN
			 			   V_OUT_STR := P_TRAN_CURSOR.ACCOUNT_NUMBER||',';
			 			   V_OUT_STR := V_OUT_STR||TO_CHAR(P_TRAN_CURSOR.TRANSACTION_AMOUNT)||',';
			 			   V_OUT_STR := V_OUT_STR||TO_CHAR(P_TRAN_CURSOR.ORIGINTIMESTAMP,'DD/MM/RRRR HH24:MI:SS')||',';
			 			   V_OUT_STR := V_OUT_STR||TO_CHAR(P_TRAN_CURSOR.ORIGINTRANSACTIONID)||',';
			 			   V_OUT_STR := V_OUT_STR||'8200000000'||','; --vtU ACQUIRER ID
			 			   V_OUT_STR := V_OUT_STR||'1'; --Payment Profile ID , we are not using since not using Refill Method
			 			   ELSE
			 			   V_OUT_STR :='Other type of dealers will have this line';
			 			   END IF;

			 			   INSERT INTO TUM_RECON_FILE_OUTPUT COLUMNS (RECON_ID,RECON_DATE,RECON_SCOPE,TUM_DEALER_ID,DEALER_TYPE,LINE_OUT)
			 			   VALUES (V_RECON_ID,V_RECON_STARTED,V_RECON_SCOPE,V_TUM_DEALER_ID,V_DEALER_TYPE,V_OUT_STR);

			 
			 UPDATE EMMUSER.TUM_CS_TRANSACTIONS SET PROCESSED = 1 ,RECON_ID = V_RECON_ID
			 WHERE ORIGINTRANSACTIONID = V_EDGE_TRANSACTION_ID;

			 COMMIT;
	ELSE -- V_COUNT = 0, MEANS CS TRANSACTION COULDNOT BE FOUND IN OUR TRANSACTION TABLE
	V_ERROR_DETAIL := 'Transaction couldnt be found in TUM_TRANS table.';
	V_COUNT_TRNF := V_COUNT_TRNF +1;
	sp_CSPassNotFoundLog (V_RECON_ID,V_RECON_STARTED,V_RECON_SCOPE,P_TRAN_CURSOR.ORIGINTRANSACTIONID,P_TRAN_CURSOR.EXTERNALDATA2,V_RECON_STATUS,V_STATUS,V_ERROR_DETAIL);
	UPDATE EMMUSER.TUM_CS_TRANSACTIONS SET PROCESSED = 9 ,RECON_ID = V_RECON_ID
	WHERE ORIGINTRANSACTIONID=P_TRAN_CURSOR.ORIGINTRANSACTIONID;
	COMMIT;
	END IF;

	V_TUM_TRANSACTION_ID :=NULL;
	V_EDGE_TRANSACTION_ID :=NULL;
	V_TRANS_AMOUNT:=NULL;
	V_RECON_STATUS:= NULL;
	V_STATUS := NULL;
	V_SUBCRIBER_MSISDN := NULL;
	V_TUM_DEALER_ID :=0;
  END LOOP;
  CLOSE CS_TRAN_CURSOR;
V_RECON_FINISHED := SYSDATE;
V_HK_STARTED :=SYSDATE;
-- HouseKeeping START
INSERT INTO TUM_RECON_PER_DEALER_SUM_TBL (RECON_ID,TUM_DEALER_ID,NUM_TRAN,AMOUNT_TRAN)
(SELECT V_RECON_ID,TUM_DEALER_ID,COUNT(*),SUM(TRANS_AMOUNT)
FROM TUM_TRANS_TBL
WHERE RECON_ID = V_RECON_ID
GROUP BY V_RECON_ID,TUM_DEALER_ID);
COMMIT;
V_HK1_FINISHED  :=SYSDATE;
INSERT INTO TUM_CS_TRANSACTION_HIST_TBL
(SELECT * FROM EMMUSER.TUM_CS_TRANSACTIONS WHERE RECON_ID = V_RECON_ID AND PROCESSED = 1);
DELETE FROM EMMUSER.TUM_CS_TRANSACTIONS WHERE RECON_ID = V_RECON_ID AND PROCESSED = 1;
COMMIT;
V_HK2_FINISHED :=SYSDATE;
INSERT INTO TUM_TRANS_TBL_HIST_TBL
(SELECT * FROM TUM_TRANS_TBL WHERE RECON_ID = V_RECON_ID);
DELETE FROM TUM_TRANS_TBL WHERE RECON_ID = V_RECON_ID;
COMMIT;
V_HK3_FINISHED :=SYSDATE;
--HouseKeeping END

INSERT INTO TUM_RECON_BRIEF COLUMNS(RECON_ID,RECON_DATE,RECON_SCOPE,
	   						COUNT_CS_SCOPE,COUNT_SUCCESS , COUNT_ERR ,
  							COUNT_ERR_TYPE1 ,  COUNT_ERR_TYPE2 ,  COUNT_ERR_TYPE3 ,
							COUNT_ERR_TYPE4 ,  COUNT_ERR_TYPE5 ,  COMPLETION_STATUS ,
							ERROR_DETAIL)
							VALUES (V_RECON_ID,V_RECON_STARTED,V_RECON_SCOPE,
							V_COUNT_CS_SCOPE,V_COUNT_SUCC,V_COUNT_ERRO,
							V_COUNT_TRPR,V_COUNT_AMPR,V_COUNT_RSPR,
							V_COUNT_TSPR,0,'Normal Completion',
							'');
V_HK_FINISHED :=SYSDATE;
INSERT INTO RECON_PERFORMANCE COLUMNS (RECON_ID,STARTDATE,ENDDATE,HKSTART,HK1,HK2,HK3,HKEND) 
VALUES (V_RECON_ID,V_RECON_STARTED,V_RECON_FINISHED ,V_HK_STARTED,V_HK1_FINISHED ,V_HK2_FINISHED ,V_HK3_FINISHED ,V_HK_FINISHED );
COMMIT;

EXCEPTION
WHEN OTHERS THEN
ROLLBACK;
V_ERROR_DETAIL1 :=TO_CHAR(SQLCODE)||SUBSTR(SQLERRM,1,150);
INSERT INTO TUM_RECON_BRIEF COLUMNS(RECON_ID,RECON_DATE,RECON_SCOPE,
	   						COUNT_CS_SCOPE,COUNT_SUCCESS , COUNT_ERR ,
							COUNT_ERR_TYPE1 ,  COUNT_ERR_TYPE2 ,  COUNT_ERR_TYPE3 ,
							COUNT_ERR_TYPE4 ,  COUNT_ERR_TYPE5 ,  COMPLETION_STATUS ,
							ERROR_DETAIL)
							VALUES (V_RECON_ID,V_RECON_STARTED,V_RECON_SCOPE,
							V_COUNT_CS_SCOPE,V_COUNT_SUCC,V_COUNT_ERRO,
							V_COUNT_TRPR,V_COUNT_AMPR,V_COUNT_RSPR,
							V_COUNT_TSPR,0,'Erronous Completion',
 							V_ERROR_DETAIL1);
COMMIT;

END sp_Recon;
--*****************************************************************************************
--*
--*
--*
--*****************************************************************************************

PROCEDURE sp_CSPassNotFoundLog(P_RECON_ID IN NUMBER,P_RECON_DATE IN DATE,P_RECON_SCOPE  IN DATE,
P_ORIGINTRANSACTIONID IN NUMBER,P_TRANSACTION_AMOUNT IN NUMBER,P_RECON_STATUS IN NUMBER,P_TRANSACTION_STATUS IN NUMBER,P_ERROR_DETAIL IN VARCHAR2)
IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
INSERT INTO TUM_RECON_CSPASS_NOTFOUND
COLUMNS(RECON_ID,RECON_DATE,RECON_SCOPE,ORIGINTRANSACTIONID,TUM_TRANSACTION_ID,RECON_STATUS,TRANSACTION_STATUS,ERROR_DETAIL)
VALUES(P_RECON_ID,P_RECON_DATE,P_RECON_SCOPE,P_ORIGINTRANSACTIONID,P_TRANSACTION_AMOUNT,P_RECON_STATUS,P_TRANSACTION_STATUS,P_ERROR_DETAIL);
COMMIT;
END sp_CSPassNotFoundLog;
--*****************************************************************************************
--*
--*
--*
--*****************************************************************************************

FUNCTION sp_GetDealerType (P_DEALER_ID IN NUMBER) RETURN VARCHAR2
IS
V_DEALER_TYPE VARCHAR2(15);
BEGIN
SELECT DEALER_TYPE INTO V_DEALER_TYPE
FROM TUM_DEALERS_TBL
WHERE TUM_DEALER_ID = P_DEALER_ID;

RETURN V_DEALER_TYPE;

EXCEPTION
WHEN NO_DATA_FOUND THEN
RETURN 'NotFound';
WHEN OTHERS THEN
Return 'NotFoundOther';
END SP_GetDealerType;

--*****************************************************************************************
--*
--*
--*
--*****************************************************************************************

PROCEDURE sp_PaymentRegisterShop
(P_USERNAME IN VARCHAR2,P_ACCPAC_DEALER_ID IN VARCHAR2,P_ACCPAC_TIMESTAMP IN DATE,
P_ERP_REFERENCE IN VARCHAR2, P_ERP_ORDER_ID IN VARCHAR2,P_ERP_AMOUNT IN NUMBER,

P_TUM_TRANSACTION_ID OUT NUMBER,P_DB_RESULTCODE OUT NUMBER,P_BALANCE_BEFORE OUT NUMBER,
P_BALANCE_AFTER OUT NUMBER)
IS
V_ACCPAC_DEALER_ID 		TUM_DEALERS_TBL.ACCPAC_DEALER_ID%TYPE;
V_TUM_DEALER_ID	    	TUM_DEALERS_TBL.TUM_DEALER_ID%TYPE;
USER_NOT_EXIST 			EXCEPTION;
SHOP_NOT_ACTIVE			EXCEPTION;
SHOP_NOT_EXIST			EXCEPTION;
USER_NOT_ACTIVE			EXCEPTION;
ERP_REF_ERROR			EXCEPTION;
ERP_ORD_ERROR 			EXCEPTION;
V_TUM_TIMESTAMP			DATE:=SYSDATE;
V_TUM_PAYMENT_ID		NUMBER(12):=0;
V_SHOP_EXIST			NUMBER(1):=0;
V_USER_EXIST			NUMBER(1):=0;
V_SHOP_ACTIVE			NUMBER(1):=0;
V_STATUS				VARCHAR2(10):='';
V_ERP_REFUSED			NUMBER(1):=0;
V_ERP_ORDUSED			NUMBER(1):=0;
V_ERROR_DETAIL			VARCHAR2(255):='None';

BEGIN

 P_DB_RESULTCODE:=0;
 P_BALANCE_BEFORE:=0;
 P_BALANCE_AFTER :=0;

 SELECT COUNT(*) INTO V_ERP_REFUSED
 FROM TUM_ACCPAC_PAYMENTS_TBL
 WHERE ACCPAC_REF_NO = P_ERP_REFERENCE;
 IF V_ERP_REFUSED = 1 THEN
 RAISE ERP_REF_ERROR;
 END IF;
 
 SELECT COUNT(*) INTO V_ERP_ORDUSED
 FROM TUM_ACCPAC_PAYMENTS_TBL
 WHERE ACCPAC_ORDER_ID = P_ERP_ORDER_ID;
 IF V_ERP_ORDUSED = 1 THEN
 RAISE ERP_ORD_ERROR;
 END IF;
 
 SELECT COUNT(*) INTO V_USER_EXIST
 FROM TUM_USER_TBL
 WHERE USERNAME=P_USERNAME;
 IF V_USER_EXIST=0 THEN
 RAISE USER_NOT_EXIST;
 END IF;

 SELECT STATUS
 INTO V_STATUS
 FROM TUM_USER_TBL
 WHERE USERNAME=P_USERNAME;
 IF V_STATUS !='Active' THEN
 RAISE USER_NOT_ACTIVE;
 END IF;

 SELECT COUNT(*) INTO V_SHOP_EXIST
 FROM TUMT.TUM_DEALERS_TBL
 WHERE ACCPAC_DEALER_ID = P_ACCPAC_DEALER_ID
 AND   DELETED=0;
 IF V_SHOP_EXIST != 1 THEN
 RAISE SHOP_NOT_EXIST;
 END iF;

 SELECT COUNT(*) INTO V_SHOP_ACTIVE
 FROM TUM_DEALERS_TBL
 WHERE ACCPAC_DEALER_ID = P_ACCPAC_DEALER_ID
 AND DELETED = 0
 AND STATUS = 'Active';
 IF V_SHOP_ACTIVE != 1 THEN
 RAISE SHOP_NOT_ACTIVE;
 End if;

 SELECT TUM_DEALER_ID
 INTO   V_TUM_DEALER_ID
 FROM TUMT.TUM_DEALERS_TBL
 WHERE ACCPAC_DEALER_ID = P_ACCPAC_DEALER_ID
 AND   DELETED=0 AND STATUS = 'Active';

        SELECT SEQ_PAYMENT_ARRIVED.NEXTVAL INTO P_TUM_TRANSACTION_ID  FROM DUAL;
		V_TUM_PAYMENT_ID := P_TUM_TRANSACTION_ID;
        SELECT SYSDATE INTO V_TUM_TIMESTAMP FROM DUAL;
		
		INSERT INTO TUM_ACCPAC_PAYMENTS_TBL(
		ID,TUM_TIMESTAMP,AMOUNT,
		ACCPAC_REF_NO,ACCPAC_USERNAME,ACCPAC_DEALER_ID,
		ACCPAC_ORDER_ID,ACCPAC_TIMESTAMP,STATUS)
		VALUES(P_TUM_TRANSACTION_ID,V_TUM_TIMESTAMP,P_ERP_AMOUNT,
		P_ERP_REFERENCE,P_USERNAME,P_ACCPAC_DEALER_ID,
		P_ERP_ORDER_ID,V_TUM_TIMESTAMP,'Pending');
        INSERT INTO TUM_ARRIVED_PAYMENTS_LOG_TBL (
		TUM_TRANSACTION_ID,ACCPAC_REF_NO,ACCPAC_ORDER_ID,
		TUM_TIMESTAMP,AMOUNT,DB_RESULTCODE,ERROR_DETAIL)
        VALUES (P_TUM_TRANSACTION_ID,P_ERP_REFERENCE,P_ERP_ORDER_ID,
		V_TUM_TIMESTAMP,P_ERP_AMOUNT,0,V_ERROR_DETAIL);

 		SELECT SEQ_PAYMENT_REGISTER.NEXTVAL INTO P_TUM_TRANSACTION_ID FROM DUAL;
		UPDATE TUM_DEALER_ACCOUNT_TBL
 		SET BALANCE_AMOUNT=BALANCE_AMOUNT+P_ERP_AMOUNT
 		WHERE TUM_DEALER_ID = V_TUM_DEALER_ID
 		RETURNING BALANCE_AMOUNT INTO P_BALANCE_AFTER;

		P_BALANCE_BEFORE := P_BALANCE_AFTER-P_ERP_AMOUNT;
	
		UPDATE TUM_ACCPAC_PAYMENTS_TBL
 		SET REGISTERING_TRANSACTION_ID = P_TUM_TRANSACTION_ID,
 		REGISTERING_TIMESTAMP = V_TUM_TIMESTAMP,
 		EDGE_DEALER_ID = P_ACCPAC_DEALER_ID,
 		EDGE_TRANSACTION_ID = 0,
 		EDGE_TIMESTAMP = V_TUM_TIMESTAMP,
 		STATUS = 'Registered'
		WHERE ID = V_TUM_PAYMENT_ID
		AND ACCPAC_REF_NO = P_ERP_REFERENCE
 		AND ACCPAC_ORDER_ID = P_ERP_ORDER_ID
 		AND AMOUNT = P_ERP_AMOUNT
 		AND STATUS = 'Pending';
	
		INSERT INTO TUM_RGSTERED_PAYMENTS_LOG_TBL
		(REGISTERING_TRANSACTION_ID,EDGE_TRANSACTION_ID,TUM_PAYMENT_ID,EDGE_DEALER_ID,
	 	ACCPAC_REF_NO,ACCPAC_ORDER_ID,TUM_TIMESTAMP,EDGE_TIMESTAMP,
	 	AMOUNT,BEFORE_BALANCE,AFTER_BALANCE,ERROR_DETAIL)
	 	VALUES
	 	(P_TUM_TRANSACTION_ID,0,V_TUM_PAYMENT_ID,P_ACCPAC_DEALER_ID,
	  	P_ERP_REFERENCE,P_ERP_ORDER_ID,V_TUM_TIMESTAMP,P_ACCPAC_TIMESTAMP,
	  	P_ERP_AMOUNT,P_BALANCE_BEFORE,P_BALANCE_AFTER,'User : '||P_USERNAME);
		COMMIT;

EXCEPTION
WHEN USER_NOT_EXIST THEN
ROLLBACK;
P_DB_RESULTCODE:=12;
V_ERROR_DETAIL := 'User does not exist (TUM_USER_TBL)';
 		INSERT INTO TUM_RGSTERED_PAYMENTS_LOG_TBL
		(REGISTERING_TRANSACTION_ID,EDGE_TRANSACTION_ID,TUM_PAYMENT_ID,EDGE_DEALER_ID,
	 	ACCPAC_REF_NO,ACCPAC_ORDER_ID,TUM_TIMESTAMP,EDGE_TIMESTAMP,
	 	AMOUNT,BEFORE_BALANCE,AFTER_BALANCE,ERROR_DETAIL)
	 	VALUES
	 	(P_TUM_TRANSACTION_ID,0,0,P_ACCPAC_DEALER_ID,
	  	P_ERP_REFERENCE,P_ERP_ORDER_ID,V_TUM_TIMESTAMP,P_ACCPAC_TIMESTAMP,
	  	P_ERP_AMOUNT,P_BALANCE_BEFORE,P_BALANCE_AFTER,'User : '||P_USERNAME);
COMMIT;

WHEN USER_NOT_ACTIVE THEN
ROLLBACK;
P_DB_RESULTCODE:=12;
V_ERROR_DETAIL := 'User not ACTIVE (TUM_USER_TBL)';
 		INSERT INTO TUM_RGSTERED_PAYMENTS_LOG_TBL
		(REGISTERING_TRANSACTION_ID,EDGE_TRANSACTION_ID,TUM_PAYMENT_ID,EDGE_DEALER_ID,
	 	ACCPAC_REF_NO,ACCPAC_ORDER_ID,TUM_TIMESTAMP,EDGE_TIMESTAMP,
	 	AMOUNT,BEFORE_BALANCE,AFTER_BALANCE,ERROR_DETAIL)
	 	VALUES
	 	(P_TUM_TRANSACTION_ID,0,0,P_ACCPAC_DEALER_ID,
	  	P_ERP_REFERENCE,P_ERP_ORDER_ID,V_TUM_TIMESTAMP,P_ACCPAC_TIMESTAMP,
	  	P_ERP_AMOUNT,P_BALANCE_BEFORE,P_BALANCE_AFTER,'User : '||P_USERNAME);
COMMIT;


WHEN SHOP_NOT_ACTIVE THEN
ROLLBACK;
P_DB_RESULTCODE:=11;
V_ERROR_DETAIL := 'SHOP is not active (TUM_USER_TBL.STATUS)';
 		INSERT INTO TUM_RGSTERED_PAYMENTS_LOG_TBL
		(REGISTERING_TRANSACTION_ID,EDGE_TRANSACTION_ID,TUM_PAYMENT_ID,EDGE_DEALER_ID,
	 	ACCPAC_REF_NO,ACCPAC_ORDER_ID,TUM_TIMESTAMP,EDGE_TIMESTAMP,
	 	AMOUNT,BEFORE_BALANCE,AFTER_BALANCE,ERROR_DETAIL)
	 	VALUES
	 	(P_TUM_TRANSACTION_ID,0,0,P_ACCPAC_DEALER_ID,
	  	P_ERP_REFERENCE,P_ERP_ORDER_ID,V_TUM_TIMESTAMP,P_ACCPAC_TIMESTAMP,
	  	P_ERP_AMOUNT,P_BALANCE_BEFORE,P_BALANCE_AFTER,'User : '||P_USERNAME);
COMMIT;

WHEN SHOP_NOT_EXIST THEN
ROLLBACK;
P_DB_RESULTCODE:=10;
V_ERROR_DETAIL := 'SHOP could not be found (TUM_DEALERS_TBL)';
 		INSERT INTO TUM_RGSTERED_PAYMENTS_LOG_TBL
		(REGISTERING_TRANSACTION_ID,EDGE_TRANSACTION_ID,TUM_PAYMENT_ID,EDGE_DEALER_ID,
	 	ACCPAC_REF_NO,ACCPAC_ORDER_ID,TUM_TIMESTAMP,EDGE_TIMESTAMP,
	 	AMOUNT,BEFORE_BALANCE,AFTER_BALANCE,ERROR_DETAIL)
	 	VALUES
	 	(P_TUM_TRANSACTION_ID,0,0,P_ACCPAC_DEALER_ID,
	  	P_ERP_REFERENCE,P_ERP_ORDER_ID,V_TUM_TIMESTAMP,P_ACCPAC_TIMESTAMP,
	  	P_ERP_AMOUNT,P_BALANCE_BEFORE,P_BALANCE_AFTER,'User : '||P_USERNAME);
COMMIT;

WHEN OTHERS THEN
ROLLBACK;
P_DB_RESULTCODE:=40;
V_ERROR_DETAIL :=TO_CHAR(SQLCODE)||SUBSTR(SQLERRM,1,150);
 		INSERT INTO TUM_RGSTERED_PAYMENTS_LOG_TBL
		(REGISTERING_TRANSACTION_ID,EDGE_TRANSACTION_ID,TUM_PAYMENT_ID,EDGE_DEALER_ID,
	 	ACCPAC_REF_NO,ACCPAC_ORDER_ID,TUM_TIMESTAMP,EDGE_TIMESTAMP,
	 	AMOUNT,BEFORE_BALANCE,AFTER_BALANCE,ERROR_DETAIL)
	 	VALUES
	 	(P_TUM_TRANSACTION_ID,0,0,P_ACCPAC_DEALER_ID,
	  	P_ERP_REFERENCE,P_ERP_ORDER_ID,V_TUM_TIMESTAMP,P_ACCPAC_TIMESTAMP,
	  	P_ERP_AMOUNT,P_BALANCE_BEFORE,P_BALANCE_AFTER,'User : '||P_USERNAME||' , '||V_ERROR_DETAIL);
COMMIT;

END sp_PaymentRegisterShop;


--*****************************************************************************************
--*
--*
--*
--*****************************************************************************************
PROCEDURE sp_GetLast5Today(P_USERNAME IN VARCHAR2,P_LAST5_CURSOR OUT C_LAST5_DETAILS_CURSOR,P_DBRESULTCODE OUT NUMBER)
IS
V_TUM_DEALER_ID    			 TUM_DEALERS_TBL.TUM_DEALER_ID%TYPE;
V_USER_EXIST				 NUMBER(1) :=0;
V_ERROR_DETAIL				 VARCHAR2(255);
USER_NOT_EXIST			 EXCEPTION;
BEGIN
SELECT COUNT(*) INTO V_USER_EXIST
FROM TUM_USER_TBL
WHERE USERNAME = P_USERNAME;
	  IF V_USER_EXIST = 0 THEN
	  	 RAISE USER_NOT_EXIST;
	  ELSE
	  	  SELECT DEALER_ID INTO V_TUM_DEALER_ID 
	  	  FROM TUM_USER_TBL
	  	  WHERE USERNAME = P_USERNAME;
	  	  OPEN P_LAST5_CURSOR FOR
	  	  SELECT ID,TUM_DEALER_ID,TUM_TIMESTAMP,TRANS_AMOUNT,BEFORE_BALANCE,AFTER_BALANCE,SUBSCRIBER_MSISDN FROM 
		  (
	  	  SELECT ID,TUM_DEALER_ID,TUM_TIMESTAMP,TRANS_AMOUNT,BEFORE_BALANCE,AFTER_BALANCE,SUBSCRIBER_MSISDN
	  	  FROM   TUM_TRANS_TBL
	  	  WHERE TUM_DEALER_ID = V_TUM_DEALER_ID
	  	  AND USERNAME = P_USERNAME
	  	  ORDER BY ID DESC
	  	  )
      	  WHERE ROWNUM < 6;
	  P_DBRESULTCODE :=0;  
	  END IF;

EXCEPTION
WHEN USER_NOT_EXIST THEN
P_DBRESULTCODE :=10;
WHEN OTHERS THEN
P_DBRESULTCODE :=40;
V_ERROR_DETAIL :=TO_CHAR(SQLCODE)||SUBSTR(SQLERRM,1,150);
sp_Errors(sysdate,'SP_GetLast5Today','PID= 0',V_ERROR_DETAIL);
END;
--*****************************************************************************************
--*
--*
--*
--*****************************************************************************************
PROCEDURE sp_ChangePassword(P_USERNAME IN VARCHAR2,P_REQ_TRANSACTION_ID IN NUMBER,P_REQ_TIMESTAMP IN DATE,
P_DBRESULTCODE OUT NUMBER,P_TUM_TRANSACTION_ID OUT NUMBER)
IS
V_USER_EXIST			NUMBER(1) :=0;
V_TUM_TRANSACTION_ID    NUMBER(10):=0;
V_ERROR_DETAIL			VARCHAR2(255);
USER_NOT_EXIST			EXCEPTION;

BEGIN
SELECT COUNT(*) INTO V_USER_EXIST
FROM TUM_USER_TBL
WHERE USERNAME = P_USERNAME;
	  IF V_USER_EXIST = 0 THEN
	  	 RAISE USER_NOT_EXIST;
	  ELSE
	  	  SELECT SEQ_CHANGE_PWD.NEXTVAL
		  INTO V_TUM_TRANSACTION_ID
		  FROM DUAL;
		  p_tum_transaction_id := V_TUM_TRANSACTION_ID;
	  	  P_DBRESULTCODE:=0;
		  INSERT INTO TUM_CHANGE_PWD_LOG COLUMNS(ID,REQUEST_TIMESTAMP,USERNAME,DB_RESULTCODE)
	  	  VALUES (P_TUM_TRANSACTION_ID,P_REQ_TIMESTAMP,P_USERNAME,P_DBRESULTCODE);
	  	  COMMIT;
	  END IF;
EXCEPTION
WHEN USER_NOT_EXIST THEN
P_DBRESULTCODE :=10;
sp_Errors(sysdate,'sp_ChangePassword','P_USERNAME='||P_USERNAME||': NOT EXIST', V_ERROR_DETAIL);
WHEN OTHERS THEN
P_DBRESULTCODE :=40;
V_ERROR_DETAIL :=TO_CHAR(SQLCODE)||SUBSTR(SQLERRM,1,150);
sp_Errors(sysdate,'sp_ChangePassword','P_USERNAME='||P_USERNAME||',P_REQ_TRANSACTION_ID='||TO_CHAR(P_REQ_TRANSACTION_ID),V_ERROR_DETAIL);
END sp_ChangePassword;

--*****************************************************************************************
--*
--*
--*
--*****************************************************************************************
PROCEDURE sp_ChangePassword1(PUSERNAME IN VARCHAR2,PREQTRANSACTIONID IN NUMBER,PDBRESULTCODE OUT NUMBER,PTUMTRANSACTIONID OUT NUMBER)
IS
V_USER_EXIST			NUMBER(1) :=0;
V_TUM_TRANSACTION_ID    NUMBER(10):=0;
V_ERROR_DETAIL			VARCHAR2(255);
USER_NOT_EXIST			EXCEPTION;

BEGIN
SELECT COUNT(*) INTO V_USER_EXIST
FROM TUM_USER_TBL
WHERE USERNAME = PUSERNAME;
	  IF V_USER_EXIST = 0 THEN
	  	 RAISE USER_NOT_EXIST;
	  ELSE
	  	  SELECT SEQ_CHANGE_PWD.NEXTVAL
		  INTO V_TUM_TRANSACTION_ID
		  FROM DUAL;
		  ptumtransactionid := V_TUM_TRANSACTION_ID;
	  	  PDBRESULTCODE:=0;
		  INSERT INTO TUM_CHANGE_PWD_LOG COLUMNS(ID,REQUEST_TIMESTAMP,USERNAME,DB_RESULTCODE) VALUES (PTUMTRANSACTIONID,sysdate,PUSERNAME,PDBRESULTCODE);
	  	  COMMIT;
	  END IF;
EXCEPTION
WHEN USER_NOT_EXIST THEN
PDBRESULTCODE :=10;
sp_Errors(sysdate,'sp_ChangePassword','P_USERNAME='||PUSERNAME||': NOT EXIST', V_ERROR_DETAIL);
WHEN OTHERS THEN
PDBRESULTCODE :=40;
V_ERROR_DETAIL :=TO_CHAR(SQLCODE)||SUBSTR(SQLERRM,1,150);
sp_Errors(sysdate,'sp_ChangePassword','P_USERNAME='||PUSERNAME||',P_REQ_TRANSACTION_ID='||TO_CHAR(PREQTRANSACTIONID),V_ERROR_DETAIL);
END sp_ChangePassword1;


END TUMT_MAIN;
/
